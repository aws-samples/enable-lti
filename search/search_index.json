{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>Enable LTI (eLTI) is a sample service to enable Learning Tool(s) to be LTI 1.3 compliant, in order to integrate with a variety of Learning Management Systems (LMS).</p> <p></p>"},{"location":"#terminology","title":"Terminology","text":"<ul> <li>Enable LTI / eLTI: This service that enables a Learning Tool to be LTI 1.3 compliant.</li> <li>LMS / Learning Platform: Learning Management Systems such as Blackboard, Canvas, D2L, Moodle, Open edX, etc</li> <li>LTI: Learning Tools Interoperability standards specification, current version is 1.3 (https://www.imsglobal.org/spec/lti/v1p3/).</li> <li>OAuth 2.0: Open Authorization 2.0 is an authorization framework (https://oauth.net/2/)</li> <li>OIDC: Open ID Connect is an authentication framework (https://openid.net/connect/)</li> <li>Tool: An application that provides a learning experience. This could be a content authoring tool, a content delivery tool, a gradebook, a discussion board, etc.</li> </ul>"},{"location":"#problem","title":"Problem","text":"<p>Learning Management Systems implement a standard specification called LTI to interact with external tools. LTI 1.3 as a specification leverages OpenID Connect, signed JWTs, and OAuth2.0 workflows for authentication. This is a set of standards that some customers have found complex to implement.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>This project provides a service that can be extended and/or customized to support LTI 1.3 in a Learning Tool. eLTI accepts LTI 1.3 requests from LMS, handles the validation of those requests, will lookup the destination URL to redirect the user agent (browser) to based on the LTI 1.3 request data see LTI 1.3 Domain Model, and after authenticating the user to the Tool provided IDP, will redirect the user agent to the destination URL</p> <p>The Learning Tool (content or experience) is required to support:</p> <ol> <li>inbound federation via an OpenID Connect provider</li> <li>the ability to issue request to RESTful APIs</li> </ol>"},{"location":"#service-usage","title":"Service Usage","text":"<p>Instead of developing the LTI handshake mechanisms inside each Tool, this project can be used as a standalone service which will allow tools to be registered with with LMSs and be able to comply with LTI handshakes with minimal effort.</p>"},{"location":"#library-usage","title":"Library Usage","text":"<p>Tool vendors can implement this project as part of their Tool which will allow their Tool to be registered with with LMSs and be able to comply with LTI handshakes with minimal effort.</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#aws-service-overview","title":"AWS Service Overview","text":"<p>The following architecture represents an overview of the AWS services used for the implementation of eLTI.</p> <p></p> <p>eLTI leverages the following AWS services:</p> <ul> <li>AWS WAF is a web application firewall that helps protect web applications from attacks by allowing you to configure rules that allow, block, or monitor (count) web requests based on conditions that you define.</li> <li>Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. Amazon API Gateway acts as the \u201cFront Door\u201d for accessing our application and proxy the entire HTTP request to the AWS Lambda function. It is also used as an API to configure the tools.</li> <li>AWS Lambda is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. AWS Lambda provides the logic for the invoking the LTI handshakes and routing for the tool.</li> <li>Amazon DynamoDB is a fully managed, serverless, key-value NoSQL database designed to run high-performance applications at any scale. Amazon DynamoDB is used to store persistent data such as LTI platform configuration data and user state.</li> <li>AWS Key Management Service (AWS KMS) is a managed service that helps you more easily create and control the keys used for cryptographic operations. AWS KMS is used to verify messages and generate keys for signing JSON Web Token (JWT) tokens.</li> </ul>"},{"location":"architecture/#detailed-flows","title":"Detailed Flows","text":""},{"location":"architecture/#out-of-band-registration","title":"Out-of-band registration","text":"<p>The following component flow diagram shows how eLTI enables a tool to be integrated into a LMS.</p> <pre><code>graph LR\n  subgraph LT[\"Learning Tool\"]\n    direction LR\n    eLTIAdmin(\"eLTI Admin\") --3--&gt; eLTI\n    eLTIAdmin --4--&gt; ToolOIDC[\"Tool OIDC\"]\n    eLTIAdmin(\"eLTI Admin\") --5--&gt; eLTI\n    ToolOIDC --- Tool\n  end\n  subgraph IT[\"Institution\"]\n    direction RL\n    LMSAdmin(\"LMS Admin\") --1--&gt; LMS\n  end\n  IT -.2.-&gt; LT</code></pre> <p>One time out-of-band registration steps:</p> <ol> <li>LMS Admin configures the Learning Tool inside of the LMS using the eLTI URLs.</li> <li>LMS Admin shares the output of the configuration with the eLTI admin. These details include the <code>client_id</code>, <code>secret_key</code>, and <code>deployment_id</code>.</li> <li>eLTI Admin saves the platform information using eLTI's Configuration API. A platform config record is created in DynamoDB with the shared <code>client_id</code> and <code>deployment_id</code>, in addition to the platform's <code>iss</code>, <code>auth_token_url</code>, <code>auth_login_url</code>, and <code>access_token_url</code>.</li> <li>eLTI Admin creates a new OIDC IDP in the Tool's OIDC provider with <code>client_id</code>, <code>secret_key</code>, and eLTI URLs for authorize and token endpoints.</li> <li>eLTI Admin adds Tool and Tool OIDC information to eLTI via Configuration API. A tool config record is created in DynamoDB.</li> </ol> <p>References:</p> <ul> <li>LTI 1.3 Platform-Originating Messages Specification</li> </ul>"},{"location":"architecture/#openid-connect-launch","title":"OpenID Connect launch","text":"<p>The following component flow diagram shows how eLTI enables a Tool to be launched by a LMS using OpenID Connect Launch flow.</p> <pre><code>graph LR\n    subgraph LT[\"Learning Tool\"]\n        eLTI\n        ToolOIDC[\"Tool OIDC\"]\n        Tool\n    end\n    subgraph IT[\"Institution\"]\n        User(\"Platform User\") --1--&gt; LMS\n    end\n    LMS --2--&gt; eLTI\n    eLTI --3--&gt; eLTI\n    eLTI --4--&gt; LMS\n    LMS --5--&gt; LMS\n    LMS --6--&gt; eLTI\n    eLTI --7--&gt; eLTI\n    eLTI --8--&gt; ToolOIDC\n    ToolOIDC --9--&gt; eLTI\n    eLTI --10--&gt; ToolOIDC\n    eLTI &lt;--11--&gt; ToolOIDC\n    ToolOIDC --12--&gt; Tool</code></pre> <p>The beginning of a platform initiated message contains the following OIDC launch steps:</p> <ol> <li>A user launches LTI resource in LMS platform which is created using this tool.</li> <li>Initiate 3rd party login request POST or GET <code>/login</code> eLTI endpoint.</li> <li>eLTI verifies <code>client_id</code> and <code>iss</code>, then creates <code>state</code> and <code>nonce</code> uuids and stores them in DynamoDB.</li> <li>eLTI redirects user to LMS platform\u2019s <code>authorize_redirect</code> endpoint, registered in the Out-of-band registration flow. The <code>redirect_url</code> contains the <code>login_hint</code> and <code>lti_message_hint</code> also provided in the payload from #3 above, in addition to the <code>state</code> and <code>nonce</code> values created.</li> <li>LMS verifies that <code>redirect_url</code> is registered with <code>client_id</code> being sent, also confirms that <code>login_hint</code> and <code>lti_message_hint</code> are valid.</li> <li>LMS calls the eLTI\u2019s <code>/launch</code> endpoint, registered in the Out-of-band registration flow, and gives the JWT <code>id_token</code> and <code>access_token</code> to eLTI.</li> <li>eLTI validates <code>state</code>, <code>nonce</code>, and <code>id_token</code> before saving to DynamoDB and initializes Tool OIDC login flow.</li> <li>eLTI redirects user to the Tool OIDC\u2019s <code>/oauth2/authorize</code> endpoint, registered in the Out-of-band registration flow. The <code>state</code> and <code>nonce</code> values that are created in #3 are sent included in the URL. Example of redirect URL: <code>https://{tool_oidc_url}/oauth2/authorize?identity_provider={lms_idp}&amp;redirect_uri=&amp;response_type=code&amp;client_id=&amp;scope=openid&amp;state=&lt;state&gt;&amp;nonce=&lt;nonce&gt;</code></li> <li>Tool OIDC provider will call back eLTI\u2019s <code>/authProxy</code> endpoint, registered in the Out-of-band registration flow, and sends back <code>state</code> and <code>nonce</code> values.</li> <li>eLTI creates a new <code>code</code> value which is a uuid, associates it in DynamoDB with <code>state</code> and <code>nonce</code> created in #3, redirects to the <code>redirect_url</code> that from #9, then sends the <code>code</code> and <code>state</code> in url params and adds <code>nonce</code> as a header value.</li> <li>Tool OIDC provider calls back eLTI\u2019s <code>/tokenProxy</code> endpoint, registered in the Out-of-band registration flow. eLTI confirms that <code>state</code>, <code>nonce</code>, and <code>code</code> are matching the values in DynamoDB and returns the token associated with as JSON response to this request.</li> <li>Tool OIDC confirms the validity of the <code>id_token</code> and redirects user to the <code>redirect_url</code> that it got in #8 which is the Tool URL that user wants to load in LMS.</li> </ol> <p>References:</p> <ul> <li>LTI 1.3 - OpenID Connect Launch Flow Overview Specification</li> <li>LTI 1.3 - Authentication Response Validation</li> <li>OpenID Connect - Authorization Code Flow Steps</li> </ul>"},{"location":"architecture/#deep-linking-workflow","title":"Deep Linking workflow","text":"<p>The following component flow diagram shows how eLTI enables a Tool to integrate the Deep Linking workflow.</p> <pre><code>graph LR\n    User --1--&gt; LMS\n    LMS -.\"Launch Flow\".-&gt; eLTI\n    subgraph LT[\"Learning Tool\"]\n        eLTI -.-&gt; ToolOIDC[\"Tool OIDC\"]\n        ToolOIDC --2--&gt; Tool\n        Tool --3--&gt; Tool\n        Tool --4--&gt; eLTI\n    end\n    subgraph IT[\"Institution\"]\n        User(\"Platform User\")\n        LMS --6--&gt; LMS\n    end\n    eLTI --5--&gt; LMS</code></pre> <p>Deep Linking workflow steps:</p> <ol> <li>User clicks on eLTI Tool from a module, assignment, or other context which initiates an OIDC launch flow, refer to OpenID Connect launch flow.</li> <li>eLTI's Lambda function for the <code>/launch</code> endpoint checks the claim value for <code>lti_message_type</code> inside the the <code>id_token</code>. If the <code>lti_message_type</code> equals <code>LtiDeepLinkingRequest</code>, then the Deep Linking flow starts.</li> <li>The request is then routed to the Tool at the given launch link location. The Tool then renders the requested content. The Tool can allow users to select resources to get resource links to insert into the LMS. These resource links can implement line items to specify grading and scoring. LTI Resource Link Specification</li> <li>After a user selects the resources in the Tool, the Tool submits request to eLTI with the <code>resource_links</code> and <code>id_token</code>, where eLTI signs the request to be sent to the LMS.</li> <li>eLTI creates a deep linking response form and auto submits it to the <code>deep_linking_settings.deep_link_return_url</code> inside the <code>id_token</code> claim.</li> <li>LMS will process the content items and render the module or assignment or other context with the selected resources.</li> </ol> <p>References:</p> <ul> <li>LTI 1.3 - Deep Linking Workflow</li> </ul>"},{"location":"architecture/#names-and-role-provisioning-services-nrps-workflow","title":"Names and Role Provisioning Services (NRPS) workflow","text":"<p>The following component flow diagram shows how eLTI enables a Tool to integrate the NRPS workflow.</p> <pre><code>graph LR\n    subgraph LT[\"Learning Tool\"]\n        eLTI\n        Tool\n    end\n    subgraph IT[\"Institution\"]\n        LMS\n    end\n    Tool --1--&gt; eLTI\n    eLTI --2--&gt; LMS\n    eLTI --3--&gt; LMS\n    eLTI --4--&gt; Tool</code></pre> <p>NRPS workflow steps:</p> <ol> <li>Tool calls eLTI's <code>/rosterRetrieval</code> endpoint with <code>id_token</code>, <code>issuer</code>, <code>client_id</code>, <code>deployment_id</code> and <code>context_memberships_url</code>. <code>context_memberships_url</code> specifies the customer LMS's NRPS endpoint for a specific course.</li> <li>eLTI's Lambda function for the <code>/rosterRetrieval</code> endpoint retrieves the platform configuration, which contains client ID, access token URL, and key ID (kid) for the LMS associated with the combination of <code>client_id</code>, <code>deployment_id</code>, and <code>issuer</code>. It then generates the JWT token from the platform configuration value and request access token from the LMS's access token URL.</li> <li>Once a new access token is retrieved, it then submit <code>GET</code> request to <code>context_memberships_url</code> to retrieve the student roster from LMS.</li> <li>When the LMS returns the response to the eLTI, eLTI forwards the response to Tool.</li> </ol> <p>References:</p> <ul> <li>LTI 1.3 - Name and Role Provisioning Services Specification</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>The following steps outlined are intended to be performed after completing the Getting Started guide. Therefore, you already have the infrastructure deployed into your AWS Account and ready to be configured.</p> <p>Info</p> <p>The following walkthrough uses Canvas as the LMS and Amazon Cognito as the Tool OIDC IDP. The information shown below will correlate to other LMSs and Tool OIDCs.</p> <p>Setup configurations included below:</p> <ul> <li>LMS Platform Setup</li> <li>Tool OIDC IDP Setup</li> <li>eLTI Configuration</li> </ul> <p>Note</p> <p>The <code>Output: &lt;keys&gt;</code> mentioned in the following docs are specific values for your deployment. These can be found in the <code>packages &gt; cdk &gt; output.json</code> file if you followed the Getting Started guide or can be viewed in the console under the Amazon CloudFormation stack outputs.</p>"},{"location":"configuration/#lms-platform-setup","title":"LMS Platform Setup","text":"<p>Info</p> <p>Uses Canvas LMS as the example.</p> <p>Prerequisites:</p> <ul> <li><code>Tool URI</code> - The tool we are enabling LTI for using eLTI.</li> <li><code>Output: &lt;keys&gt;</code> - From Getting Started guide</li> </ul>"},{"location":"configuration/#creating-developer-key","title":"Creating Developer Key","text":"<ol> <li>In Canvas create a dev key by clicking on \u201cAdmin\u201d on left</li> <li>Select \u201cDeveloper Keys\u201c - URL should be simliar to [https://XXXX/accounts/X/developer_keys]</li> <li>Click on <code>+ Developer Key</code> button and select <code>LTI Key</code></li> </ol> <ol> <li>Make sure the Method is <code>Manual Entry</code></li> <li>Add a name for the key like <code>ExampleEnableLTIDevKey</code></li> <li>Give it a Title and Description</li> <li>Enter the following:</li> <li><code>Target Link URI</code> - Enter Tool URI</li> <li><code>Redirect URI</code> - Enter <code>Output: apiELTIURI*</code>/launch</li> <li><code>OpenID Connect Initiation URL</code> - Enter <code>Output: apiELTIURI*</code>/login</li> <li>Change JWK Method to Public JWK URL and enter the URL <code>Output: apiELTIURI*</code>/jwks.json</li> <li>In Additional Settings change Privacy Level to <code>Public</code></li> <li> <p>Under <code>Link Selection</code> \u2192 Select Message Type to be <code>LtiDeepLinkingRequest</code></p> <p></p> </li> <li> <p>Click on Save button at the bottom right</p> </li> <li>Save the <code>Client Id</code> for later use</li> <li> <p>Switch the state of the Developer Key from Off to On</p> <p></p> </li> </ol> <p>Saved for later steps:</p> <ul> <li><code>Saved: Client Id</code></li> </ul>"},{"location":"configuration/#adding-as-external-tool","title":"Adding as External Tool","text":"<ol> <li>After creating the developer key.</li> <li>Go to <code>Admin</code> screen and select <code>Settings</code>, <code>Apps, View App Center</code> and click on <code>+App</code></li> </ol> <ol> <li>Change App creation config type to be By client id. Enter <code>Saved: Client Id</code>.</li> </ol> <ol> <li>After adding the app, get the save the <code>Deployment Id</code> for late use.</li> </ol> <p>Section Saved Outputs:</p> <ul> <li><code>Saved: Client Id</code></li> <li><code>Saved: Deployment Id</code></li> </ul>"},{"location":"configuration/#tool-oidc-idp-setup","title":"Tool OIDC IDP Setup","text":"<p>Optional</p> <p>Only complete if you are configuring a Tool OIDC IDP.</p> <p>Info</p> <p>Uses Canvas LMS and Amazon Cognito as the example.</p> <p>Prerequisites:</p> <ul> <li><code>Tool URI</code> - The tool we are enabling LTI for using eLTI.</li> <li><code>Output: &lt;keys&gt;</code> - From Getting Started guide</li> <li><code>Saved: Client Id</code></li> </ul> <p>Add a new IDP in Cognito</p> <ol> <li>Select the UserPool that your Tool is using.</li> <li>Go to <code>Sign-in experience</code> \u2192 <code>Federated Identity Provider</code> and select <code>Add Identity Provider</code></li> </ol> <p></p> <ol> <li> <p>Add identity provider details:</p> </li> <li> <p>Federated sign-in options: OpenId Connect (OIDC)</p> </li> <li>Provider name: Enter IDP Name and save for later.</li> <li>Client Id: Enter <code>Saved: Client Id</code></li> <li>Authorized scopes: Default value should be \u201copenid\u201d</li> <li>Attribute request method: POST</li> <li>Manual input<ol> <li>Issuer URL: Since using Canvas in example, Enter https://canvas.instructure.com</li> <li>Authorization endpoint: Enter <code>Output: apiELTIURI*</code>/authorizerProxy</li> <li>Token endpoint: Enter <code>Output: apiELTIURI*</code>/tokenProxy</li> <li>UserInfo endpoint: Enter <code>Output: apiELTIURI*</code>/tokenProxy</li> <li>Jwksuri endpoint: _Since using Canvas in example, Enter https://sso.canvaslms.com/api/lti/security/jwks</li> </ol> </li> </ol> <p>*The Issuer and JWKS uri endpoints will be static for all platforms and be dependent on the LMS. Canvas values are provided above.</p> <p></p> <ol> <li> <p>Add attributes. (User pool attribute \u2192 OpenID Connect attribute)</p> </li> <li> <p>custom:LMS:ClientId \u2192 aud</p> </li> <li>custom:LMS:DeploymentId \u2192 https://purl.imsglobal.org/spec/lti/claim/deployment_id</li> <li>custom:LMS:Endpoint \u2192 https://purl.imsglobal.org/spec/lti-ags/claim/endpoint</li> <li>custom:LMS:Issuer\u2192 iss</li> <li>custom:LMS:TargetLinkUri\u2192 https://purl.imsglobal.org/spec/lti/claim/target_link_uri</li> <li>email\u2192 email</li> <li>username\u2192 sub</li> </ol> <p></p> <ol> <li> <p>Add IDP to App client.</p> </li> <li> <p>Navigate to App Integration. Save the <code>Cognito domain</code> for later.</p> </li> <li>Find your app client and open it. Save the <code>App Client ID</code> for later.</li> <li>Edit Hosted UI.</li> <li>Select the newly added IDP (<code>Saved: IDP Name</code>) from the Identity Providers list.</li> <li>Save changes.</li> </ol> <p></p> <p></p> <p></p> <p>Saved for later steps:</p> <ul> <li><code>Saved: IDP Name</code></li> <li><code>Saved: Cognito domain</code></li> <li><code>Saved: App Client Id</code> - Different than the LMS <code>Saved: Client Id</code> from \u201cLMS Platform Setup\u201d</li> </ul>"},{"location":"configuration/#elti-configuration","title":"eLTI Configuration","text":"<p>Steps to configure the platform and tool inside of eLTI.</p> <p>Info</p> <p>Uses Canvas LMS and Amazon Cognito as the example.</p> <p>Prerequisites:</p> <ul> <li><code>Tool URI</code> - The tool we are enabling LTI for using eLTI.</li> <li><code>Output: &lt;keys&gt;</code> - From Getting Started guide</li> <li><code>Saved: Client Id</code></li> <li><code>Saved: Deployment Id</code></li> <li><code>Saved: IDP Name</code></li> <li><code>Saved: Cognito domain</code></li> <li><code>Saved: App Client Id</code></li> </ul> <p>The following steps manually enter the data in the DynamoDB table. In addition to using the configuration API, you can see one way to automate these entries by referring to the integration test scripts in the code repository <code>enable-lti/test/scripts/setupInteg.ts</code> here.</p> <p>Note: There are two Dynamo DB tables, these objects go into the Control Plane table. The Control Plane table utilizes single-table design.</p> <p>Create the following entries in the <code>Output: tablesELTIControlPlaneTable*</code></p> <ol> <li> <p>Create the LMS platform object.</p> </li> <li> <p>Replace with the actual saved values:</p> <ol> <li><code>&lt;Saved: Client Id&gt;</code> with <code>Saved: Client Id</code> - Replace both entries</li> </ol> </li> </ol> <pre><code>{\n    \"PK\": \"PLATFORM#&lt;Saved: Client Id&gt;#https://canvas.instructure.com#\",\n    \"accessTokenUrl\": \"https://sso.canvaslms.com/login/oauth2/token\",\n    \"authLoginUrl\": \"https://sso.canvaslms.com/api/lti/authorize\",\n    \"authTokenUrl\": \"https://sso.canvaslms.com/api/lti/authorize_redirect\",\n    \"clientId\": \"&lt;Saved: Client Id&gt;\",\n    \"iss\": \"https://canvas.instructure.com\",\n    \"keySetUrl\": \"https://sso.canvaslms.com/api/lti/security/jwks\"\n}\n</code></pre> <ol> <li> <p>Create the LMS platform object with deployment id.</p> </li> <li> <p>Replace with the actual saved values.</p> <ol> <li><code>&lt;Saved: Client Id&gt;</code> with <code>Saved: Client Id</code> - Replace both entries</li> <li><code>&lt;Saved: Deployment Id&gt;</code> with <code>Saved: Deployment Id</code></li> </ol> </li> </ol> <pre><code>{\n    \"PK\": \"PLATFORM#&lt;Saved: Client Id&gt;#https://canvas.instructure.com#&lt;Saved: Deployment Id&gt;\",\n    \"accessTokenUrl\": \"https://sso.canvaslms.com/login/oauth2/token\",\n    \"authLoginUrl\": \"https://sso.canvaslms.com/api/lti/authorize\",\n    \"authTokenUrl\": \"https://sso.canvaslms.com/api/lti/authorize_redirect\",\n    \"clientId\": \"&lt;Saved: Client Id&gt;\",\n    \"iss\": \"https://canvas.instructure.com\",\n    \"keySetUrl\": \"https://sso.canvaslms.com/api/lti/security/jwks\"\n}\n</code></pre> <ol> <li>Create the LMS tool entry.</li> <li>If using Tool OIDC IDP replace with the actual saved values.<ol> <li><code>&lt;Saved: Client Id&gt;</code> with <code>Saved: Client Id</code></li> <li><code>&lt;Saved: App Client Id&gt;</code> with <code>Saved: App Client Id</code></li> <li><code>&lt;Saved: Cognito domain&gt;</code> with <code>Saved: Cognito domain</code></li> <li><code>&lt;Saved: IDP Name&gt;</code> with <code>Saved: IDP Name</code></li> <li><code>&lt;Tool Name&gt;</code> with text name of tool.</li> <li><code>&lt;Tool URI&gt;</code> with <code>Tool URI</code> <pre><code>{\n    \"PK\": \"TOOL#&lt;Saved: Client Id&gt;#https://canvas.instructure.com\",\n    \"data\": {\n        \"LTIResourceLinks\": [],\n        \"OIDC\": {\n            \"clientId\": \"&lt;Saved: App Client Id&gt;\",\n            \"domain\": \"&lt;Saved: Cognito domain&gt;/\",\n            \"idpName\": \"&lt;Saved: IDP Name&gt;\"\n        }\n    },\n    \"id\": \"&lt;Tool Name&gt;\",\n    \"url\": \"&lt;Tool URI&gt;\"\n}\n</code></pre></li> </ol> </li> <li>If NOT using a Tool OIDC replace with the actual saved values.<ol> <li><code>&lt;Saved: Client Id&gt;</code> with <code>Saved: Client Id</code></li> <li><code>&lt;Tool Name&gt;</code> with text name of tool.</li> <li><code>&lt;Tool URI&gt;</code> with <code>Tool URI</code> <pre><code>{\n    \"PK\": \"TOOL#&lt;Saved: Client Id&gt;#https://canvas.instructure.com\",\n    \"data\": {\n        \"LTIResourceLinks\": []\n    },\n    \"id\": \"&lt;Tool Name&gt;\",\n    \"url\": \"&lt;Tool URI&gt;\"\n}\n</code></pre></li> </ol> </li> </ol> <p>Done</p> <p>eLTI is now configured with the needed platform and tool settings.</p> <p>Go to the LMS to test if the flow is properly configured.</p>"},{"location":"implementing/","title":"Implementing","text":""},{"location":"implementing/#getting-started","title":"Getting Started","text":"System Requirements <p>The following tools need to be installed prior to building and deploying:</p> <ul> <li>Node.js 18 - How to install Node.js</li> <li>AWS CDK v2 - Install the AWS CDK</li> </ul> <p>Note</p> <p>The commands shown are run from the root directory of the project unless specified otherwise.</p> <p>The following commands install project dependencies and build eLTI. <pre><code>echo \"# Install dependencies\"\nnpm install\necho \"# Build project\"\nnpm run build\n</code></pre></p> <p>The following commands deploy and test eLTI in an integration environment.</p> <p>Note</p> <p>The CDK deploy <code>outputs.json</code> is used during the <code>test:setup</code> command to setup the configurations and table entries in an integration environment. After setup the integration tests can be run continuously.</p> <p>Info</p> <p>For cdk bootstrap, each environment (account/region combination) to which you deploy must be bootstrapped separately.</p> <pre><code>echo \"# One-time: CDK bootstrap\"\nnpm run cdk bootstrap\necho \"# CDK deploy\"\nnpm run cdk -- -- deploy --outputs-file output.json\necho \"# One-time: Setup integration test configs and table entries\"\nnpm run test:setup\necho \"# Run integration tests\"\nnpm run test:integration\n</code></pre>"},{"location":"implementing/#cleaning-up-resources","title":"Cleaning up resources","text":"<p>To cleanup the resources created by this project delete the stack that CDK deployed.</p> <p>Warning</p> <p>Do not run the following command unless intending to delete the created resources.</p> <pre><code>npm run cdk destroy\n</code></pre>"}]}